services:
  django-app:
    build: 
      context: ./app
    container_name: django-app
    command: python manage.py runserver 0.0.0.0:8000
    env_file:
      - ./app.prod.env  # production
      # - ./app.dev.env # develpoement
    ports:
      - "8000:8000"
    volumes:
      - ./backend_static:/app/static
      - ./media:/app/files
      - ./app:/app
    depends_on:
      - db
    networks:
      - app_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
      
  
  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  flower:
    container_name: flower
    image: mher/flower
    ports:
      - "5555:5555"
    command: celery flower
    env_file:
      - ./flower.dev.env
    depends_on:
      - celery
      - redis
      - rabbitmq
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:management
    restart: always
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  db:
    image: postgres:13
    container_name: database
    env_file:
      - ./db.dev.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
  
  celery:
    container_name: celery
    restart: always
    build:
      context: ./app
    command: celery -A khatamat_b worker -l INFO 
    volumes:
      - ./app:/app
    env_file:
      - ./app.dev.env
    depends_on:
      - django-app
      - redis
    networks:
      - app_network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./backend_static:/app/static
      - ./media:/files
    ports:
      - "80:80"
    depends_on:
      - django-app
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  backend_static:
  media:
    external: true
